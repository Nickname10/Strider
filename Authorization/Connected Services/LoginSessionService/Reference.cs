//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Authorization.LoginSessionService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoginSessionService.ILoginSession")]
    public interface ILoginSession {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/Connect", ReplyAction="http://tempuri.org/ILoginSession/ConnectResponse")]
        ClientServerModels.LoggedClient Connect(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/Connect", ReplyAction="http://tempuri.org/ILoginSession/ConnectResponse")]
        System.Threading.Tasks.Task<ClientServerModels.LoggedClient> ConnectAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/CreateGameSession", ReplyAction="http://tempuri.org/ILoginSession/CreateGameSessionResponse")]
        bool CreateGameSession(ClientServerModels.GameSession gameSession, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/CreateGameSession", ReplyAction="http://tempuri.org/ILoginSession/CreateGameSessionResponse")]
        System.Threading.Tasks.Task<bool> CreateGameSessionAsync(ClientServerModels.GameSession gameSession, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/DeleteGameSession", ReplyAction="http://tempuri.org/ILoginSession/DeleteGameSessionResponse")]
        bool DeleteGameSession(int gameSessionId, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/DeleteGameSession", ReplyAction="http://tempuri.org/ILoginSession/DeleteGameSessionResponse")]
        System.Threading.Tasks.Task<bool> DeleteGameSessionAsync(int gameSessionId, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/CreateCharacter", ReplyAction="http://tempuri.org/ILoginSession/CreateCharacterResponse")]
        bool CreateCharacter(ClientServerModels.Character character, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/CreateCharacter", ReplyAction="http://tempuri.org/ILoginSession/CreateCharacterResponse")]
        System.Threading.Tasks.Task<bool> CreateCharacterAsync(ClientServerModels.Character character, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/DeleteCharacter", ReplyAction="http://tempuri.org/ILoginSession/DeleteCharacterResponse")]
        bool DeleteCharacter(ClientServerModels.Character character, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/DeleteCharacter", ReplyAction="http://tempuri.org/ILoginSession/DeleteCharacterResponse")]
        System.Threading.Tasks.Task<bool> DeleteCharacterAsync(ClientServerModels.Character character, string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/RefreshSessionList", ReplyAction="http://tempuri.org/ILoginSession/RefreshSessionListResponse")]
        ClientServerModels.GameSession[] RefreshSessionList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/RefreshSessionList", ReplyAction="http://tempuri.org/ILoginSession/RefreshSessionListResponse")]
        System.Threading.Tasks.Task<ClientServerModels.GameSession[]> RefreshSessionListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/Disconnect", ReplyAction="http://tempuri.org/ILoginSession/DisconnectResponse")]
        void Disconnect(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/Disconnect", ReplyAction="http://tempuri.org/ILoginSession/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/GetCharacters", ReplyAction="http://tempuri.org/ILoginSession/GetCharactersResponse")]
        ClientServerModels.Character[] GetCharacters(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/GetCharacters", ReplyAction="http://tempuri.org/ILoginSession/GetCharactersResponse")]
        System.Threading.Tasks.Task<ClientServerModels.Character[]> GetCharactersAsync(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/TryConnectToGameSession", ReplyAction="http://tempuri.org/ILoginSession/TryConnectToGameSessionResponse")]
        bool TryConnectToGameSession(int gameSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginSession/TryConnectToGameSession", ReplyAction="http://tempuri.org/ILoginSession/TryConnectToGameSessionResponse")]
        System.Threading.Tasks.Task<bool> TryConnectToGameSessionAsync(int gameSessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginSessionChannel : Authorization.LoginSessionService.ILoginSession, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginSessionClient : System.ServiceModel.ClientBase<Authorization.LoginSessionService.ILoginSession>, Authorization.LoginSessionService.ILoginSession {
        
        public LoginSessionClient() {
        }
        
        public LoginSessionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoginSessionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginSessionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginSessionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClientServerModels.LoggedClient Connect(string email, string password) {
            return base.Channel.Connect(email, password);
        }
        
        public System.Threading.Tasks.Task<ClientServerModels.LoggedClient> ConnectAsync(string email, string password) {
            return base.Channel.ConnectAsync(email, password);
        }
        
        public bool CreateGameSession(ClientServerModels.GameSession gameSession, string sessionToken) {
            return base.Channel.CreateGameSession(gameSession, sessionToken);
        }
        
        public System.Threading.Tasks.Task<bool> CreateGameSessionAsync(ClientServerModels.GameSession gameSession, string sessionToken) {
            return base.Channel.CreateGameSessionAsync(gameSession, sessionToken);
        }
        
        public bool DeleteGameSession(int gameSessionId, string sessionToken) {
            return base.Channel.DeleteGameSession(gameSessionId, sessionToken);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGameSessionAsync(int gameSessionId, string sessionToken) {
            return base.Channel.DeleteGameSessionAsync(gameSessionId, sessionToken);
        }
        
        public bool CreateCharacter(ClientServerModels.Character character, string sessionToken) {
            return base.Channel.CreateCharacter(character, sessionToken);
        }
        
        public System.Threading.Tasks.Task<bool> CreateCharacterAsync(ClientServerModels.Character character, string sessionToken) {
            return base.Channel.CreateCharacterAsync(character, sessionToken);
        }
        
        public bool DeleteCharacter(ClientServerModels.Character character, string sessionToken) {
            return base.Channel.DeleteCharacter(character, sessionToken);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCharacterAsync(ClientServerModels.Character character, string sessionToken) {
            return base.Channel.DeleteCharacterAsync(character, sessionToken);
        }
        
        public ClientServerModels.GameSession[] RefreshSessionList() {
            return base.Channel.RefreshSessionList();
        }
        
        public System.Threading.Tasks.Task<ClientServerModels.GameSession[]> RefreshSessionListAsync() {
            return base.Channel.RefreshSessionListAsync();
        }
        
        public void Disconnect(string sessionToken) {
            base.Channel.Disconnect(sessionToken);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string sessionToken) {
            return base.Channel.DisconnectAsync(sessionToken);
        }
        
        public ClientServerModels.Character[] GetCharacters(string sessionToken) {
            return base.Channel.GetCharacters(sessionToken);
        }
        
        public System.Threading.Tasks.Task<ClientServerModels.Character[]> GetCharactersAsync(string sessionToken) {
            return base.Channel.GetCharactersAsync(sessionToken);
        }
        
        public bool TryConnectToGameSession(int gameSessionId) {
            return base.Channel.TryConnectToGameSession(gameSessionId);
        }
        
        public System.Threading.Tasks.Task<bool> TryConnectToGameSessionAsync(int gameSessionId) {
            return base.Channel.TryConnectToGameSessionAsync(gameSessionId);
        }
    }
}
