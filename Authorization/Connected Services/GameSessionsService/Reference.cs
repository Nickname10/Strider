//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Authorization.GameSessionsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameSessionsService.IGameSessions", CallbackContract=typeof(Authorization.GameSessionsService.IGameSessionsCallback))]
    public interface IGameSessions {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameSessions/Connect", ReplyAction="http://tempuri.org/IGameSessions/ConnectResponse")]
        ClientServerModels.GameSessionModels.PlayerModels.Player Connect(int gameSessionId, ClientServerModels.Character character, ClientServerModels.LoggedClient loggedClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameSessions/Connect", ReplyAction="http://tempuri.org/IGameSessions/ConnectResponse")]
        System.Threading.Tasks.Task<ClientServerModels.GameSessionModels.PlayerModels.Player> ConnectAsync(int gameSessionId, ClientServerModels.Character character, ClientServerModels.LoggedClient loggedClient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/Disconnect")]
        void Disconnect(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/SendMessage")]
        void SendMessage(string sessionToken, int gameSessionId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string sessionToken, int gameSessionId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/ChangeStateToMovingUp")]
        void ChangeStateToMovingUp(int gameSessionId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/ChangeStateToMovingUp")]
        System.Threading.Tasks.Task ChangeStateToMovingUpAsync(int gameSessionId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/ChangeStateToMovingLeft")]
        void ChangeStateToMovingLeft(int gameSessionId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/ChangeStateToMovingLeft")]
        System.Threading.Tasks.Task ChangeStateToMovingLeftAsync(int gameSessionId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/ChangeStateToMovingRight")]
        void ChangeStateToMovingRight(int gameSessionId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/ChangeStateToMovingRight")]
        System.Threading.Tasks.Task ChangeStateToMovingRightAsync(int gameSessionId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/ChangeStateToMovingDown")]
        void ChangeStateToMovingDown(int gameSessionId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/ChangeStateToMovingDown")]
        System.Threading.Tasks.Task ChangeStateToMovingDownAsync(int gameSessionId, int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameSessionsCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/MessageCallback")]
        void MessageCallback(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/RefreshCoordinatesCallback")]
        void RefreshCoordinatesCallback(ClientServerModels.GameSessionModels.Food[] foods, ClientServerModels.GameSessionModels.PlayerModels.Player[] players, ClientServerModels.GameSessionModels.PlayerScoreItem[] playerScoreItems);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessions/DestroyCallback")]
        void DestroyCallback();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameSessionsChannel : Authorization.GameSessionsService.IGameSessions, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameSessionsClient : System.ServiceModel.DuplexClientBase<Authorization.GameSessionsService.IGameSessions>, Authorization.GameSessionsService.IGameSessions {
        
        public GameSessionsClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameSessionsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameSessionsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameSessionsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameSessionsClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ClientServerModels.GameSessionModels.PlayerModels.Player Connect(int gameSessionId, ClientServerModels.Character character, ClientServerModels.LoggedClient loggedClient) {
            return base.Channel.Connect(gameSessionId, character, loggedClient);
        }
        
        public System.Threading.Tasks.Task<ClientServerModels.GameSessionModels.PlayerModels.Player> ConnectAsync(int gameSessionId, ClientServerModels.Character character, ClientServerModels.LoggedClient loggedClient) {
            return base.Channel.ConnectAsync(gameSessionId, character, loggedClient);
        }
        
        public void Disconnect(string sessionToken) {
            base.Channel.Disconnect(sessionToken);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string sessionToken) {
            return base.Channel.DisconnectAsync(sessionToken);
        }
        
        public void SendMessage(string sessionToken, int gameSessionId, string message) {
            base.Channel.SendMessage(sessionToken, gameSessionId, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string sessionToken, int gameSessionId, string message) {
            return base.Channel.SendMessageAsync(sessionToken, gameSessionId, message);
        }
        
        public void ChangeStateToMovingUp(int gameSessionId, int playerId) {
            base.Channel.ChangeStateToMovingUp(gameSessionId, playerId);
        }
        
        public System.Threading.Tasks.Task ChangeStateToMovingUpAsync(int gameSessionId, int playerId) {
            return base.Channel.ChangeStateToMovingUpAsync(gameSessionId, playerId);
        }
        
        public void ChangeStateToMovingLeft(int gameSessionId, int playerId) {
            base.Channel.ChangeStateToMovingLeft(gameSessionId, playerId);
        }
        
        public System.Threading.Tasks.Task ChangeStateToMovingLeftAsync(int gameSessionId, int playerId) {
            return base.Channel.ChangeStateToMovingLeftAsync(gameSessionId, playerId);
        }
        
        public void ChangeStateToMovingRight(int gameSessionId, int playerId) {
            base.Channel.ChangeStateToMovingRight(gameSessionId, playerId);
        }
        
        public System.Threading.Tasks.Task ChangeStateToMovingRightAsync(int gameSessionId, int playerId) {
            return base.Channel.ChangeStateToMovingRightAsync(gameSessionId, playerId);
        }
        
        public void ChangeStateToMovingDown(int gameSessionId, int playerId) {
            base.Channel.ChangeStateToMovingDown(gameSessionId, playerId);
        }
        
        public System.Threading.Tasks.Task ChangeStateToMovingDownAsync(int gameSessionId, int playerId) {
            return base.Channel.ChangeStateToMovingDownAsync(gameSessionId, playerId);
        }
    }
}
